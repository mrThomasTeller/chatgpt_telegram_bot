[
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html",
        "description": "html",
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "telegram",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "telegram",
        "description": "telegram",
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardButton",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "BotCommand",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "ApplicationBuilder",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackContext",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "MessageHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackQueryHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "AIORateLimiter",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "telegram.constants",
        "description": "telegram.constants",
        "isExtraImport": true,
        "detail": "telegram.constants",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "telegram.constants",
        "description": "telegram.constants",
        "isExtraImport": true,
        "detail": "telegram.constants",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config",
        "description": "config",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database",
        "description": "database",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "openai_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai_utils",
        "description": "openai_utils",
        "detail": "openai_utils",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "tiktoken",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tiktoken",
        "description": "tiktoken",
        "detail": "tiktoken",
        "documentation": {}
    },
    {
        "label": "split_text_into_chunks",
        "kind": 2,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "def split_text_into_chunks(text, chunk_size):\n    for i in range(0, len(text), chunk_size):\n        yield text[i:i + chunk_size]\nasync def register_user_if_not_exists(update: Update, context: CallbackContext, user: User):\n    if not db.check_if_user_exists(user.id):\n        db.add_new_user(\n            user.id,\n            update.message.chat_id,\n            username=user.username,\n            first_name=user.first_name,",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "get_chat_mode_menu",
        "kind": 2,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "def get_chat_mode_menu(page_index: int):\n    n_chat_modes_per_page = config.n_chat_modes_per_page\n    text = f\"Select <b>chat mode</b> ({len(config.chat_modes)} modes available):\"\n    # buttons\n    chat_mode_keys = list(config.chat_modes.keys())\n    page_chat_mode_keys = chat_mode_keys[page_index * n_chat_modes_per_page:(page_index + 1) * n_chat_modes_per_page]\n    keyboard = []\n    for chat_mode_key in page_chat_mode_keys:\n        name = config.chat_modes[chat_mode_key][\"name\"]\n        keyboard.append([InlineKeyboardButton(name, callback_data=f\"set_chat_mode|{chat_mode_key}\")])",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "get_settings_menu",
        "kind": 2,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "def get_settings_menu(user_id: int):\n    current_model = db.get_user_attribute(user_id, \"current_model\")\n    text = config.models[\"info\"][current_model][\"description\"]\n    text += \"\\n\\n\"\n    score_dict = config.models[\"info\"][current_model][\"scores\"]\n    for score_key, score_value in score_dict.items():\n        text += \"🟢\" * score_value + \"⚪️\" * (5 - score_value) + f\" – {score_key}\\n\\n\"\n    text += \"\\nSelect <b>model</b>:\"\n    # buttons to choose models\n    buttons = []",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "run_bot",
        "kind": 2,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "def run_bot() -> None:\n    application = (\n        ApplicationBuilder()\n        .token(config.telegram_token)\n        .concurrent_updates(True)\n        .rate_limiter(AIORateLimiter(max_retries=5))\n        .http_version(\"1.1\")\n        .get_updates_http_version(\"1.1\")\n        .post_init(post_init)\n        .build()",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "db = database.Database()\nlogger = logging.getLogger(__name__)\nuser_semaphores = {}\nuser_tasks = {}\nHELP_MESSAGE = \"\"\"Commands:\n⚪ /retry – Regenerate last bot answer\n⚪ /new – Start new dialog\n⚪ /mode – Select chat mode\n⚪ /settings – Show settings\n⚪ /balance – Show balance",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "logger = logging.getLogger(__name__)\nuser_semaphores = {}\nuser_tasks = {}\nHELP_MESSAGE = \"\"\"Commands:\n⚪ /retry – Regenerate last bot answer\n⚪ /new – Start new dialog\n⚪ /mode – Select chat mode\n⚪ /settings – Show settings\n⚪ /balance – Show balance\n⚪ /help – Show help",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "user_semaphores",
        "kind": 5,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "user_semaphores = {}\nuser_tasks = {}\nHELP_MESSAGE = \"\"\"Commands:\n⚪ /retry – Regenerate last bot answer\n⚪ /new – Start new dialog\n⚪ /mode – Select chat mode\n⚪ /settings – Show settings\n⚪ /balance – Show balance\n⚪ /help – Show help\n🎨 Generate images from text prompts in <b>👩‍🎨 Artist</b> /mode",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "user_tasks",
        "kind": 5,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "user_tasks = {}\nHELP_MESSAGE = \"\"\"Commands:\n⚪ /retry – Regenerate last bot answer\n⚪ /new – Start new dialog\n⚪ /mode – Select chat mode\n⚪ /settings – Show settings\n⚪ /balance – Show balance\n⚪ /help – Show help\n🎨 Generate images from text prompts in <b>👩‍🎨 Artist</b> /mode\n👥 Add bot to <b>group chat</b>: /help_group_chat",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "HELP_MESSAGE",
        "kind": 5,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "HELP_MESSAGE = \"\"\"Commands:\n⚪ /retry – Regenerate last bot answer\n⚪ /new – Start new dialog\n⚪ /mode – Select chat mode\n⚪ /settings – Show settings\n⚪ /balance – Show balance\n⚪ /help – Show help\n🎨 Generate images from text prompts in <b>👩‍🎨 Artist</b> /mode\n👥 Add bot to <b>group chat</b>: /help_group_chat\n🎤 You can send <b>Voice Messages</b> instead of text",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "HELP_GROUP_CHAT_MESSAGE",
        "kind": 5,
        "importPath": "bot.bot",
        "description": "bot.bot",
        "peekOfCode": "HELP_GROUP_CHAT_MESSAGE = \"\"\"You can add bot to any <b>group chat</b> to help and entertain its participants!\nInstructions (see <b>video</b> below):\n1. Add the bot to the group chat\n2. Make it an <b>admin</b>, so that it can see messages (all other rights can be restricted)\n3. You're awesome!\nTo get a reply from the bot in the chat – @ <b>tag</b> it or <b>reply</b> to its message.\nFor example: \"{bot_username} write a poem about Telegram\"\n\"\"\"\ndef split_text_into_chunks(text, chunk_size):\n    for i in range(0, len(text), chunk_size):",
        "detail": "bot.bot",
        "documentation": {}
    },
    {
        "label": "config_dir",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "config_dir = Path(__file__).parent.parent.resolve() / \"config\"\n# load yaml config\nwith open(config_dir / \"config.yml\", 'r') as f:\n    config_yaml = yaml.safe_load(f)\n# load .env config\nconfig_env = dotenv.dotenv_values(config_dir / \"config.env\")\n# config parameters\ntelegram_token = config_yaml[\"telegram_token\"]\nopenai_api_key = config_yaml[\"openai_api_key\"]\nopenai_api_base = config_yaml.get(\"openai_api_base\", None)",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "config_env",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "config_env = dotenv.dotenv_values(config_dir / \"config.env\")\n# config parameters\ntelegram_token = config_yaml[\"telegram_token\"]\nopenai_api_key = config_yaml[\"openai_api_key\"]\nopenai_api_base = config_yaml.get(\"openai_api_base\", None)\nallowed_telegram_usernames = config_yaml[\"allowed_telegram_usernames\"]\nnew_dialog_timeout = config_yaml[\"new_dialog_timeout\"]\nenable_message_streaming = config_yaml.get(\"enable_message_streaming\", True)\nreturn_n_generated_images = config_yaml.get(\"return_n_generated_images\", 1)\nimage_size = config_yaml.get(\"image_size\", \"512x512\")",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "telegram_token",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "telegram_token = config_yaml[\"telegram_token\"]\nopenai_api_key = config_yaml[\"openai_api_key\"]\nopenai_api_base = config_yaml.get(\"openai_api_base\", None)\nallowed_telegram_usernames = config_yaml[\"allowed_telegram_usernames\"]\nnew_dialog_timeout = config_yaml[\"new_dialog_timeout\"]\nenable_message_streaming = config_yaml.get(\"enable_message_streaming\", True)\nreturn_n_generated_images = config_yaml.get(\"return_n_generated_images\", 1)\nimage_size = config_yaml.get(\"image_size\", \"512x512\")\nn_chat_modes_per_page = config_yaml.get(\"n_chat_modes_per_page\", 5)\nmongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "openai_api_key",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "openai_api_key = config_yaml[\"openai_api_key\"]\nopenai_api_base = config_yaml.get(\"openai_api_base\", None)\nallowed_telegram_usernames = config_yaml[\"allowed_telegram_usernames\"]\nnew_dialog_timeout = config_yaml[\"new_dialog_timeout\"]\nenable_message_streaming = config_yaml.get(\"enable_message_streaming\", True)\nreturn_n_generated_images = config_yaml.get(\"return_n_generated_images\", 1)\nimage_size = config_yaml.get(\"image_size\", \"512x512\")\nn_chat_modes_per_page = config_yaml.get(\"n_chat_modes_per_page\", 5)\nmongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"\n# chat_modes",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "openai_api_base",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "openai_api_base = config_yaml.get(\"openai_api_base\", None)\nallowed_telegram_usernames = config_yaml[\"allowed_telegram_usernames\"]\nnew_dialog_timeout = config_yaml[\"new_dialog_timeout\"]\nenable_message_streaming = config_yaml.get(\"enable_message_streaming\", True)\nreturn_n_generated_images = config_yaml.get(\"return_n_generated_images\", 1)\nimage_size = config_yaml.get(\"image_size\", \"512x512\")\nn_chat_modes_per_page = config_yaml.get(\"n_chat_modes_per_page\", 5)\nmongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"\n# chat_modes\nwith open(config_dir / \"chat_modes.yml\", 'r') as f:",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "allowed_telegram_usernames",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "allowed_telegram_usernames = config_yaml[\"allowed_telegram_usernames\"]\nnew_dialog_timeout = config_yaml[\"new_dialog_timeout\"]\nenable_message_streaming = config_yaml.get(\"enable_message_streaming\", True)\nreturn_n_generated_images = config_yaml.get(\"return_n_generated_images\", 1)\nimage_size = config_yaml.get(\"image_size\", \"512x512\")\nn_chat_modes_per_page = config_yaml.get(\"n_chat_modes_per_page\", 5)\nmongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"\n# chat_modes\nwith open(config_dir / \"chat_modes.yml\", 'r') as f:\n    chat_modes = yaml.safe_load(f)",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "new_dialog_timeout",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "new_dialog_timeout = config_yaml[\"new_dialog_timeout\"]\nenable_message_streaming = config_yaml.get(\"enable_message_streaming\", True)\nreturn_n_generated_images = config_yaml.get(\"return_n_generated_images\", 1)\nimage_size = config_yaml.get(\"image_size\", \"512x512\")\nn_chat_modes_per_page = config_yaml.get(\"n_chat_modes_per_page\", 5)\nmongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"\n# chat_modes\nwith open(config_dir / \"chat_modes.yml\", 'r') as f:\n    chat_modes = yaml.safe_load(f)\n# models",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "enable_message_streaming",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "enable_message_streaming = config_yaml.get(\"enable_message_streaming\", True)\nreturn_n_generated_images = config_yaml.get(\"return_n_generated_images\", 1)\nimage_size = config_yaml.get(\"image_size\", \"512x512\")\nn_chat_modes_per_page = config_yaml.get(\"n_chat_modes_per_page\", 5)\nmongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"\n# chat_modes\nwith open(config_dir / \"chat_modes.yml\", 'r') as f:\n    chat_modes = yaml.safe_load(f)\n# models\nwith open(config_dir / \"models.yml\", 'r') as f:",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "return_n_generated_images",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "return_n_generated_images = config_yaml.get(\"return_n_generated_images\", 1)\nimage_size = config_yaml.get(\"image_size\", \"512x512\")\nn_chat_modes_per_page = config_yaml.get(\"n_chat_modes_per_page\", 5)\nmongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"\n# chat_modes\nwith open(config_dir / \"chat_modes.yml\", 'r') as f:\n    chat_modes = yaml.safe_load(f)\n# models\nwith open(config_dir / \"models.yml\", 'r') as f:\n    models = yaml.safe_load(f)",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "image_size",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "image_size = config_yaml.get(\"image_size\", \"512x512\")\nn_chat_modes_per_page = config_yaml.get(\"n_chat_modes_per_page\", 5)\nmongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"\n# chat_modes\nwith open(config_dir / \"chat_modes.yml\", 'r') as f:\n    chat_modes = yaml.safe_load(f)\n# models\nwith open(config_dir / \"models.yml\", 'r') as f:\n    models = yaml.safe_load(f)\n# files",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "n_chat_modes_per_page",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "n_chat_modes_per_page = config_yaml.get(\"n_chat_modes_per_page\", 5)\nmongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"\n# chat_modes\nwith open(config_dir / \"chat_modes.yml\", 'r') as f:\n    chat_modes = yaml.safe_load(f)\n# models\nwith open(config_dir / \"models.yml\", 'r') as f:\n    models = yaml.safe_load(f)\n# files\nhelp_group_chat_video_path = Path(__file__).parent.parent.resolve() / \"static\" / \"help_group_chat.mp4\"",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "mongodb_uri",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "mongodb_uri = f\"mongodb://mongo:{config_env['MONGODB_PORT']}\"\n# chat_modes\nwith open(config_dir / \"chat_modes.yml\", 'r') as f:\n    chat_modes = yaml.safe_load(f)\n# models\nwith open(config_dir / \"models.yml\", 'r') as f:\n    models = yaml.safe_load(f)\n# files\nhelp_group_chat_video_path = Path(__file__).parent.parent.resolve() / \"static\" / \"help_group_chat.mp4\"",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "help_group_chat_video_path",
        "kind": 5,
        "importPath": "bot.config",
        "description": "bot.config",
        "peekOfCode": "help_group_chat_video_path = Path(__file__).parent.parent.resolve() / \"static\" / \"help_group_chat.mp4\"",
        "detail": "bot.config",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "bot.database",
        "description": "bot.database",
        "peekOfCode": "class Database:\n    def __init__(self):\n        self.client = pymongo.MongoClient(config.mongodb_uri)\n        self.db = self.client[\"chatgpt_telegram_bot\"]\n        self.user_collection = self.db[\"user\"]\n        self.dialog_collection = self.db[\"dialog\"]\n    def check_if_user_exists(self, user_id: int, raise_exception: bool = False):\n        if self.user_collection.count_documents({\"_id\": user_id}) > 0:\n            return True\n        else:",
        "detail": "bot.database",
        "documentation": {}
    },
    {
        "label": "ChatGPT",
        "kind": 6,
        "importPath": "bot.openai_utils",
        "description": "bot.openai_utils",
        "peekOfCode": "class ChatGPT:\n    def __init__(self, model=\"gpt-3.5-turbo\"):\n        assert model in {\"text-davinci-003\", \"gpt-3.5-turbo-16k\", \"gpt-3.5-turbo\", \"gpt-4\", \"gpt-4o\", \"gpt-4-vision-preview\"}, f\"Unknown model: {model}\"\n        self.model = model\n    async def send_message(self, message, dialog_messages=[], chat_mode=\"assistant\"):\n        if chat_mode not in config.chat_modes.keys():\n            raise ValueError(f\"Chat mode {chat_mode} is not supported\")\n        n_dialog_messages_before = len(dialog_messages)\n        answer = None\n        while answer is None:",
        "detail": "bot.openai_utils",
        "documentation": {}
    },
    {
        "label": "openai.api_key",
        "kind": 5,
        "importPath": "bot.openai_utils",
        "description": "bot.openai_utils",
        "peekOfCode": "openai.api_key = config.openai_api_key\nif config.openai_api_base is not None:\n    openai.api_base = config.openai_api_base\nlogger = logging.getLogger(__name__)\nOPENAI_COMPLETION_OPTIONS = {\n    \"temperature\": 0.7,\n    \"max_tokens\": 1000,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,",
        "detail": "bot.openai_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "bot.openai_utils",
        "description": "bot.openai_utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nOPENAI_COMPLETION_OPTIONS = {\n    \"temperature\": 0.7,\n    \"max_tokens\": 1000,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"request_timeout\": 60.0,\n}\nclass ChatGPT:",
        "detail": "bot.openai_utils",
        "documentation": {}
    },
    {
        "label": "OPENAI_COMPLETION_OPTIONS",
        "kind": 5,
        "importPath": "bot.openai_utils",
        "description": "bot.openai_utils",
        "peekOfCode": "OPENAI_COMPLETION_OPTIONS = {\n    \"temperature\": 0.7,\n    \"max_tokens\": 1000,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"request_timeout\": 60.0,\n}\nclass ChatGPT:\n    def __init__(self, model=\"gpt-3.5-turbo\"):",
        "detail": "bot.openai_utils",
        "documentation": {}
    }
]